document.getElementById("search-input").addEventListener("input", function () {
  const query = this.value.toLowerCase();
  const cards = document.querySelectorAll(".card");

  cards.forEach(card => {
    const title = card.querySelector("h2").textContent.toLowerCase();
    if (title.includes(query)) {
      card.style.display = "block";
    } else {
      card.style.display = "none";
    }
  });
});

// Get modal elements
const modal = document.getElementById("updateModal");
const modalVersion = document.getElementById("modalVersion");
const changelogContent = document.getElementById("changelogContent");
const updateButtons = document.querySelectorAll(".btn.update");
const closeBtn = document.querySelector(".close");

// Add click event to all update buttons
updateButtons.forEach(button => {
  button.addEventListener("click", () => {
    const version = button.getAttribute("data-version");
    const changelog = button.getAttribute("data-changelog");
    
    if (!changelog) {
      showNotification("No updates available for this executor!");
      return;
    }
    
    // Format changelog text (split by newlines and create list items)
    const changelogLines = changelog.split('\n');
    const formattedChangelog = changelogLines.map(line => 
      line.startsWith('+') ? `<li>${line}</li>` : `<h3>${line}</h3>`
    ).join('');

    modalVersion.textContent = version;
    changelogContent.innerHTML = `<ul>${formattedChangelog}</ul>`;
    modal.style.display = "block";
    
    // Th√™m delay nh·ªè ƒë·ªÉ animation ho·∫°t ƒë·ªông
    setTimeout(() => {
      modal.classList.add('active');
    }, 10);
  });
});

// C·∫≠p nh·∫≠t ƒë√≥ng modal
function closeModal() {
  modal.classList.remove('active');
  setTimeout(() => {
    modal.style.display = "none";
  }, 300);
}

closeBtn.addEventListener("click", closeModal);

// Close modal when clicking outside
window.addEventListener("click", (event) => {
  if (event.target == modal) {
    closeModal();
  }
});

// Webhook Discord configuration
const DISCORD_WEBHOOK_URL = 'YOUR_DISCORD_WEBHOOK_URL_HERE';

// Function to send data to Discord webhook
async function sendToDiscord(message, type) {
    try {
        // Get user's IP and location
        const ipResponse = await fetch('https://api.ipify.org?format=json');
        const ipData = await ipResponse.json();
        const ip = ipData.ip;

        // Get additional location info
        const locationResponse = await fetch(`https://ipapi.co/${ip}/json/`);
        const locationData = await locationResponse.json();

        // Format timestamp
        const timestamp = new Date().toLocaleString();

        // Create embed message for Discord
        const embedData = {
            embeds: [{
                title: type === 'visit' ? 'üåê New Website Visit' : 
                       type === 'download' ? '‚¨áÔ∏è New Download' : 'üëÄ Update View',
                color: type === 'visit' ? 3447003 : 
                       type === 'download' ? 15158332 : 10181046,
                fields: [
                    {
                        name: 'üìç Location',
                        value: `Country: ${locationData.country_name}\nCity: ${locationData.city}\nRegion: ${locationData.region}`,
                        inline: true
                    },
                    {
                        name: 'üîß Technical Info',
                        value: `IP: ${ip}\nBrowser: ${navigator.userAgent}`,
                        inline: true
                    },
                    {
                        name: 'üìù Details',
                        value: message
                    }
                ],
                timestamp: new Date(),
                footer: {
                    text: 'Yushiha Oren Tracking System'
                }
            }]
        };

        // Send to Discord
        await fetch(DISCORD_WEBHOOK_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(embedData)
        });
    } catch (error) {
        console.error('Error sending to Discord:', error);
    }
}

// Track page visits
document.addEventListener('DOMContentLoaded', () => {
    sendToDiscord('User visited the website', 'visit');
});

// Track downloads
document.querySelectorAll('.btn.download').forEach(button => {
    button.addEventListener('click', function() {
        const executorName = this.closest('.card').querySelector('h2').textContent;
        sendToDiscord(`Downloaded ${executorName}`, 'download');
    });
});

// Track update views
document.querySelectorAll('.btn.update').forEach(button => {
    button.addEventListener('click', function() {
        const executorName = this.closest('.card').querySelector('h2').textContent;
        sendToDiscord(`Viewed updates for ${executorName}`, 'update');
    });
});

const searchInput = document.getElementById("search-input");
const searchContainer = document.querySelector(".search-container");

// ƒê·∫£m b·∫£o placeholder hi·ªÉn th·ªã ngay t·ª´ ƒë·∫ßu
searchInput.setAttribute("placeholder", "Search executors...");

// X·ª≠ l√Ω khi click v√†o input l·∫ßn ƒë·∫ßu
searchInput.addEventListener("focus", function() {
    if (this.value === "Search executors...") {
        this.value = "";
    }
});

// X·ª≠ l√Ω khi blur (click ra ngo√†i) input
searchInput.addEventListener("blur", function() {
    if (this.value === "") {
        this.value = "Search executors...";
    }
});

let searchTimeout;
searchInput.addEventListener("input", function() {
    const query = this.value.toLowerCase();
    
    // Kh√¥ng t√¨m ki·∫øm n·∫øu l√† text m·∫∑c ƒë·ªãnh
    if (query === "search executors...") return;
    
    // Clear timeout c≈© n·∫øu c√≥
    clearTimeout(searchTimeout);
    
    // ƒê·∫∑t timeout m·ªõi v·ªõi delay 1.5 gi√¢y
    searchTimeout = setTimeout(() => {
        const cards = document.querySelectorAll(".card");
        let hasResults = false;

        cards.forEach(card => {
            const title = card.querySelector("h2").textContent.toLowerCase();
            if (title.includes(query)) {
                card.style.display = "block";
                hasResults = true;
            } else {
                card.style.display = "none";
            }
        });

        // Hi·ªÉn th·ªã "No executors found" trong √¥ input khi kh√¥ng t√¨m th·∫•y
        if (!hasResults && query !== '') {
            this.value = ""; // X√≥a text ƒë√£ nh·∫≠p
            this.value = "No executors found";
            
            // Sau 2 gi√¢y, ƒë·∫∑t l·∫°i text m·∫∑c ƒë·ªãnh
            setTimeout(() => {
                this.value = "Search executors...";
            }, 2000);
        }

    }, 1500);
});

// Reset khi x√≥a h·∫øt text
searchInput.addEventListener("keyup", function(e) {
    if (this.value === "") {
        const cards = document.querySelectorAll(".card");
        cards.forEach(card => card.style.display = "block");
    }
});

// ƒê·∫£m b·∫£o placeholder lu√¥n hi·ªÉn th·ªã khi focus out
searchInput.addEventListener("focusout", function() {
    if (this.value === "") {
        this.setAttribute("placeholder", "Search executors...");
    }
});

// Reset placeholder khi focus v√†o input
searchInput.addEventListener("focus", function() {
    if (this.getAttribute("placeholder") === "No executors found") {
        this.setAttribute("placeholder", "Search executors...");
    }
});

// Preload ·∫£nh
const preloadImage = new Image();
preloadImage.src = "https://share.creavite.co/678c95de0ae0e4f686a66bb2.gif";

// H√†m hi·ªÉn th·ªã th√¥ng b√°o
function showNotification(message, imageUrl) {
    const notification = document.createElement('div');
    notification.className = 'notification';

    // N·ªôi dung th√¥ng b√°o
    notification.innerHTML = `
        <div class="notification-content">
            <span class="close-x">√ó</span> 
            <p>${message}</p>
            ${imageUrl ? `<img src="${imageUrl}" class="notification-img" alt="Notification Image">` : ''}
            <div class="notification-buttons">
                <button class="dismiss-btn">ƒê√≥ng</button>
                <button class="dismiss-24h-btn">ƒê√≥ng 24h</button>
            </div>
        </div>
    `;

    // Ch√®n notify v√†o ngay ƒë·∫ßu body
    document.body.insertAdjacentElement("afterbegin", notification);

    // Hi·ªÉn th·ªã notify
    setTimeout(() => notification.classList.add('show'), 10);

    // X·ª≠ l√Ω ƒë√≥ng notify
    notification.querySelector('.close-x').addEventListener('click', () => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
    });

    notification.querySelector('.dismiss-btn').addEventListener('click', () => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
    });

    notification.querySelector('.dismiss-24h-btn').addEventListener('click', () => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
        localStorage.setItem('notificationDismissed', Date.now());
    });

    // Ki·ªÉm tra t·∫Øt 24h
    const lastDismissed = localStorage.getItem('notificationDismissed');
    if (lastDismissed && Date.now() - lastDismissed < 24 * 60 * 60 * 1000) {
        notification.remove();
    }
}

// Hi·ªÉn th·ªã notify sau 1 gi√¢y khi t·∫£i trang
window.addEventListener('load', () => {
    setTimeout(() => {
        showNotification("Welcome to NPDK1 Executor Hub! üöÄ", "https://i.imgflip.com/g7u55.jpg?a484056");
    }, 1000);
});
// Th√™m animation khi scroll
window.addEventListener('scroll', () => {
  const cards = document.querySelectorAll('.card');
  cards.forEach(card => {
    const cardTop = card.getBoundingClientRect().top;
    const windowHeight = window.innerHeight;
    
    if (cardTop < windowHeight * 0.85) {
      card.classList.add('card-visible');
    }
  });
});
